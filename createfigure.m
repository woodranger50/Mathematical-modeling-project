function createfigure(X1, YMatrix1, X2, Y1, YMatrix2, Y2)
%CREATEFIGURE(X1, YMatrix1, X2, Y1, YMatrix2, Y2)
%  X1:  vector of x data
%  YMATRIX1:  matrix of y data
%  X2:  vector of x data
%  Y1:  vector of y data
%  YMATRIX2:  matrix of y data
%  Y2:  vector of y data

%  Auto-generated by MATLAB on 16-May-2021 15:45:32

% Create figure
figure1 = figure;

% Create subplot
subplot1 = subplot(2,1,1,'Parent',figure1);
hold(subplot1,'on');

% Create multiple lines using matrix input to plot
plot1 = plot(X1,YMatrix1,'Parent',subplot1,'Marker','o');
set(plot1(1),'DisplayName','data1');
set(plot1(2),'DisplayName','data2');
set(plot1(3),'DisplayName','data3');

% Create plot
plot(X2,Y1,'DisplayName','data4','Parent',subplot1,'Marker','x');

% Create ylabel
ylabel('Mass (g)');

% Create xlabel
xlabel('Time (s)');

% Create title
title('Large beaker: Mass');

hold(subplot1,'off');
% Create legend
legend(subplot1,'show');

% Create subplot
subplot2 = subplot(2,1,2,'Parent',figure1);
hold(subplot2,'on');

% Create multiple lines using matrix input to plot
plot2 = plot(X1,YMatrix2,'Parent',subplot2,'Marker','o');
set(plot2(1),'DisplayName','data1');
set(plot2(2),'DisplayName','data2');
set(plot2(3),'DisplayName','data3');

% Create plot
plot3 = plot(X2,Y2,'DisplayName','data4','Parent',subplot2,'Marker','x');

% Get xdata from plot
xdata1 = get(plot3, 'xdata');
% Get ydata from plot
ydata1 = get(plot3, 'ydata');
% Make sure data are column vectors
xdata1 = xdata1(:);
ydata1 = ydata1(:);


% Remove NaN values and warn
nanMask1 = isnan(xdata1(:)) | isnan(ydata1(:));
if any(nanMask1)
    warning('GeneratedCode:IgnoringNaNs', ...
        'Data points with NaN coordinates will be ignored.');
    xdata1(nanMask1) = [];
    ydata1(nanMask1) = [];
end

% Find x values for plotting the fit based on xlim
axesLimits1 = xlim(subplot2);
xplot1 = linspace(axesLimits1(1), axesLimits1(2));

% Preallocate for "Show equations" coefficients
coeffs1 = cell(1,1);

% Find coefficients for polynomial (order = 2)
fitResults1 = polyfit(xdata1,ydata1,2);
% Evaluate polynomial
yplot1 = polyval(fitResults1,xplot1);

% Save type of fit for "Show equations"
fittypesArray1(1) = 3;

% Save coefficients for "Show Equation"
coeffs1{1} = fitResults1;

% Plot the fit
fitLine1 = plot(xplot1,yplot1,'DisplayName','   quadratic',...
    'XLimInclude','off',...
    'Tag','quadratic',...
    'Parent',subplot2,...
    'MarkerSize',6,...
    'Color',[0.494 0.184 0.556]);

% Set new line in proper position
setLineOrder(subplot2,fitLine1,plot3);

% "Show equations" was selected
showEquations(fittypesArray1,coeffs1,4,subplot2);

% Create ylabel
ylabel('Temperature (°C)');

% Create xlabel
xlabel('Time (s)');

% Create title
title('Large beaker: Temperature (°C)');

hold(subplot2,'off');
% Create legend
legend(subplot2,'show');

%-------------------------------------------------------------------------%
function setLineOrder(axesh1, newLine1, associatedLine1)
%SETLINEORDER(AXESH1,NEWLINE1,ASSOCIATEDLINE1)
%  Set line order
%  AXESH1:  axes
%  NEWLINE1:  new line
%  ASSOCIATEDLINE1:  associated line

% Get the axes children
hChildren = get(axesh1,'Children');
% Remove the new line
hChildren(hChildren==newLine1) = [];
% Get the index to the associatedLine
lineIndex = find(hChildren==associatedLine1);
% Reorder lines so the new line appears with associated data
hNewChildren = [hChildren(1:lineIndex-1);newLine1;hChildren(lineIndex:end)];
% Set the children:
set(axesh1,'Children',hNewChildren);

%-------------------------------------------------------------------------%
function showEquations(fittypes1, coeffs1, digits1, axesh1)
%SHOWEQUATIONS(FITTYPES1,COEFFS1,DIGITS1,AXESH1)
%  Show equations
%  FITTYPES1:  types of fits
%  COEFFS1:  coefficients
%  DIGITS1:  number of significant digits
%  AXESH1:  axes

n = length(fittypes1);
txt = cell(length(n + 1) ,1);
txt{1,:} = ' ';
for i = 1:n
    txt{i + 1,:} = getEquationString(fittypes1(i),coeffs1{i},digits1,axesh1);
end
text(.05,.95,txt,'parent',axesh1, ...
    'verticalalignment','top','units','normalized');

%-------------------------------------------------------------------------%
function [s1, a1] = getEquationString(fittype1, coeffs1, digits1, axesh1)
%GETEQUATIONSTRING(FITTYPE1,COEFFS1,DIGITS1,AXESH1)
%  Get "Show Equation" text
%  FITTYPE1:  type of fit
%  COEFFS1:  coefficients
%  DIGITS1:  number of significant digits
%  AXESH1:  axes

if isequal(fittype1, 0)
    s1 = 'Cubic spline interpolant';
elseif isequal(fittype1, 1)
    s1 = 'Shape-preserving interpolant';
else
    if isequal(fittype1, 2)
        a1 = 'Linear: ';
    elseif isequal(fittype1, 3)
        a1 = 'Quadratic: ';
    elseif isequal(fittype1, 4)
        a1 = 'Cubic: ';
    elseif isequal(fittype1, 5)
        a1 = '4th degree: ';
    elseif isequal(fittype1, 6)
        a1 = '5th degree: ';
    elseif isequal(fittype1, 7)
        a1 = '6th degree: ';
    elseif isequal(fittype1, 8)
        a1 = '7th degree: ';
    elseif isequal(fittype1, 9)
        a1 = '8th degree: ';
    elseif isequal(fittype1, 10)
        a1 = '9th degree: ';
    elseif isequal(fittype1, 11)
        a1 = '10th degree: ';
    end
    op = '+-';
    format1 = ['%s %0.',num2str(digits1),'g*x^{%s} %s'];
    format2 = ['%s %0.',num2str(digits1),'g'];
    xl = get(axesh1, 'xlim');
    fit =  fittype1 - 1;
    s1 = sprintf('%s y =',a1);
    th = text(xl*[.95;.05],1,s1,'parent',axesh1, 'vis','off');
    if abs(coeffs1(1) < 0)
        s1 = [s1 ' -'];
    end
    for i = 1:fit
        sl = length(s1);
        if ~isequal(coeffs1(i),0) % if exactly zero, skip it
            s1 = sprintf(format1,s1,abs(coeffs1(i)),num2str(fit+1-i), op((coeffs1(i+1)<0)+1));
        end
        if (i==fit) && ~isequal(coeffs1(i),0)
            s1(end-5:end-2) = []; % change x^1 to x.
        end
        set(th,'string',s1);
        et = get(th,'extent');
        if et(1)+et(3) > xl(2)
            s1 = [s1(1:sl) sprintf('\n     ') s1(sl+1:end)];
        end
    end
    if ~isequal(coeffs1(fit+1),0)
        sl = length(s1);
        s1 = sprintf(format2,s1,abs(coeffs1(fit+1)));
        set(th,'string',s1);
        et = get(th,'extent');
        if et(1)+et(3) > xl(2)
            s1 = [s1(1:sl) sprintf('\n     ') s1(sl+1:end)];
        end
    end
    delete(th);
    % Delete last "+"
    if isequal(s1(end),'+')
        s1(end-1:end) = []; % There is always a space before the +.
    end
    if length(s1) == 3
        s1 = sprintf(format2,s1,0);
    end
end

